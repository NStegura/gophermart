// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/gophermartapi/ibusiness.go

// Package mock_gophermartapi is a generated GoMock package.
package mock_gophermartapi

import (
	context "context"
	reflect "reflect"

	models "github.com/NStegura/gophermart/internal/services/business/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBusiness is a mock of Business interface.
type MockBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessMockRecorder
}

// MockBusinessMockRecorder is the mock recorder for MockBusiness.
type MockBusinessMockRecorder struct {
	mock *MockBusiness
}

// NewMockBusiness creates a new mock instance.
func NewMockBusiness(ctrl *gomock.Controller) *MockBusiness {
	mock := &MockBusiness{ctrl: ctrl}
	mock.recorder = &MockBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusiness) EXPECT() *MockBusinessMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockBusiness) CreateOrder(ctx context.Context, userID, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockBusinessMockRecorder) CreateOrder(ctx, userID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockBusiness)(nil).CreateOrder), ctx, userID, orderID)
}

// CreateUser mocks base method.
func (m *MockBusiness) CreateUser(ctx context.Context, login, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockBusinessMockRecorder) CreateUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockBusiness)(nil).CreateUser), ctx, login, password)
}

// CreateWithdraw mocks base method.
func (m *MockBusiness) CreateWithdraw(ctx context.Context, userID, orderID int64, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", ctx, userID, orderID, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockBusinessMockRecorder) CreateWithdraw(ctx, userID, orderID, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockBusiness)(nil).CreateWithdraw), ctx, userID, orderID, sum)
}

// GetOrders mocks base method.
func (m *MockBusiness) GetOrders(ctx context.Context, userID int64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockBusinessMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockBusiness)(nil).GetOrders), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockBusiness) GetUserByID(ctx context.Context, ID int64) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockBusinessMockRecorder) GetUserByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockBusiness)(nil).GetUserByID), ctx, ID)
}

// GetUserByLogin mocks base method.
func (m *MockBusiness) GetUserByLogin(ctx context.Context, login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockBusinessMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockBusiness)(nil).GetUserByLogin), ctx, login)
}

// GetWithdrawals mocks base method.
func (m *MockBusiness) GetWithdrawals(ctx context.Context, userID int64) ([]models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockBusinessMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockBusiness)(nil).GetWithdrawals), ctx, userID)
}

// Ping mocks base method.
func (m *MockBusiness) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBusinessMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBusiness)(nil).Ping), ctx)
}
