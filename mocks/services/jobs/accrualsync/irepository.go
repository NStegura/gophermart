// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/jobs/accrualsync/irepository.go

// Package mock_accrualsync is a generated GoMock package.
package mock_accrualsync

import (
	context "context"
	reflect "reflect"

	models "github.com/NStegura/gophermart/internal/repo/models"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockRepository) Commit(ctx context.Context, tx pgx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockRepositoryMockRecorder) Commit(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRepository)(nil).Commit), ctx, tx)
}

// GetNotProcessedOrders mocks base method.
func (m *MockRepository) GetNotProcessedOrders(ctx context.Context, tx pgx.Tx) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotProcessedOrders", ctx, tx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotProcessedOrders indicates an expected call of GetNotProcessedOrders.
func (mr *MockRepositoryMockRecorder) GetNotProcessedOrders(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotProcessedOrders", reflect.TypeOf((*MockRepository)(nil).GetNotProcessedOrders), ctx, tx)
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(ctx context.Context, tx pgx.Tx, orderID int64, forUpdate bool) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, tx, orderID, forUpdate)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(ctx, tx, orderID, forUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), ctx, tx, orderID, forUpdate)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(ctx context.Context, tx pgx.Tx, ID int64, forUpdate bool) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, tx, ID, forUpdate)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(ctx, tx, ID, forUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), ctx, tx, ID, forUpdate)
}

// OpenTransaction mocks base method.
func (m *MockRepository) OpenTransaction(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTransaction", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenTransaction indicates an expected call of OpenTransaction.
func (mr *MockRepositoryMockRecorder) OpenTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTransaction", reflect.TypeOf((*MockRepository)(nil).OpenTransaction), ctx)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// Rollback mocks base method.
func (m *MockRepository) Rollback(ctx context.Context, tx pgx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRepositoryMockRecorder) Rollback(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRepository)(nil).Rollback), ctx, tx)
}

// UpdateOrder mocks base method.
func (m *MockRepository) UpdateOrder(ctx context.Context, tx pgx.Tx, orderID int64, accrual float64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, tx, orderID, accrual, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockRepositoryMockRecorder) UpdateOrder(ctx, tx, orderID, accrual, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockRepository)(nil).UpdateOrder), ctx, tx, orderID, accrual, status)
}

// UpdateUserBalance mocks base method.
func (m *MockRepository) UpdateUserBalance(ctx context.Context, tx pgx.Tx, userID int64, balance, withdrawn float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", ctx, tx, userID, balance, withdrawn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockRepositoryMockRecorder) UpdateUserBalance(ctx, tx, userID, balance, withdrawn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockRepository)(nil).UpdateUserBalance), ctx, tx, userID, balance, withdrawn)
}
